// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"

	sqlc "github.com/harmannkibue/spectabill_psp_connector_clean_architecture/internal/usecase/repository/sqlc"

	uuid "github.com/google/uuid"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// CreateBlog provides a mock function with given fields: ctx, descriptions
func (_m *Store) CreateBlog(ctx context.Context, descriptions sql.NullString) (sqlc.Blog, error) {
	ret := _m.Called(ctx, descriptions)

	var r0 sqlc.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.NullString) (sqlc.Blog, error)); ok {
		return rf(ctx, descriptions)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.NullString) sqlc.Blog); ok {
		r0 = rf(ctx, descriptions)
	} else {
		r0 = ret.Get(0).(sqlc.Blog)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.NullString) error); ok {
		r1 = rf(ctx, descriptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBlog provides a mock function with given fields: ctx, id
func (_m *Store) DeleteBlog(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBlog provides a mock function with given fields: ctx, id
func (_m *Store) GetBlog(ctx context.Context, id uuid.UUID) (sqlc.Blog, error) {
	ret := _m.Called(ctx, id)

	var r0 sqlc.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (sqlc.Blog, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) sqlc.Blog); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(sqlc.Blog)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBlog provides a mock function with given fields: ctx, arg
func (_m *Store) ListBlog(ctx context.Context, arg sqlc.ListBlogParams) ([]sqlc.Blog, error) {
	ret := _m.Called(ctx, arg)

	var r0 []sqlc.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ListBlogParams) ([]sqlc.Blog, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ListBlogParams) []sqlc.Blog); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.ListBlogParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStore(t mockConstructorTestingTNewStore) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
