// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	context "context"

	intfaces "github.com/harmannkibue/spectabill_psp_connector_clean_architecture/internal/entity/intfaces"
	mock "github.com/stretchr/testify/mock"

	sqlc "github.com/harmannkibue/spectabill_psp_connector_clean_architecture/internal/usecase/repository/sqlc"
)

// BlogUsecase is an autogenerated mock type for the BlogUsecase type
type BlogUsecase struct {
	mock.Mock
}

// CreateBlog provides a mock function with given fields: ctx, description
func (_m *BlogUsecase) CreateBlog(ctx context.Context, description string) (*sqlc.Blog, error) {
	ret := _m.Called(ctx, description)

	var r0 *sqlc.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sqlc.Blog, error)); ok {
		return rf(ctx, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sqlc.Blog); ok {
		r0 = rf(ctx, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlc.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlog provides a mock function with given fields: ctx, id
func (_m *BlogUsecase) GetBlog(ctx context.Context, id string) (*sqlc.Blog, error) {
	ret := _m.Called(ctx, id)

	var r0 *sqlc.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sqlc.Blog, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sqlc.Blog); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlc.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBlogs provides a mock function with given fields: ctx, args
func (_m *BlogUsecase) ListBlogs(ctx context.Context, args intfaces.ListBlogsParams) (*intfaces.ListBlogsResponse, error) {
	ret := _m.Called(ctx, args)

	var r0 *intfaces.ListBlogsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, intfaces.ListBlogsParams) (*intfaces.ListBlogsResponse, error)); ok {
		return rf(ctx, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, intfaces.ListBlogsParams) *intfaces.ListBlogsResponse); ok {
		r0 = rf(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*intfaces.ListBlogsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, intfaces.ListBlogsParams) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBlogUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewBlogUsecase creates a new instance of BlogUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBlogUsecase(t mockConstructorTestingTNewBlogUsecase) *BlogUsecase {
	mock := &BlogUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
